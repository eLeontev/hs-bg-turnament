generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model PendingGamePlayer {
  playerId          String       @id @map("_id")
  playerKey         String
  playerIdInGame    String
  playerLogin       String
  PendingGame       PendingGame? @relation(fields: [pendingGameGameId], references: [gameId], onDelete: Cascade, onUpdate: Cascade)
  pendingGameGameId String?
}

model PendingGame {
  gameId      String              @id @map("_id")
  gameName    String
  authorId    String
  authorLogin String
  createdDate String
  players     PendingGamePlayer[]
}

enum playGamePhases {
  heroSelection
  recruit
  combat
}

enum heroIds {
  afkay
  alkair
  alexstrasza
  ambassadorFaelin
  arannaStarseeker
  archVillainRafaam
  brukan
  cthun
  captain
}

enum minionIds {
  alleycat
  scavengingHyena
  leapfrogger
  rabidSaurolisk
  sewerRat
  monstrousMacaw
  ratPack
  caveHydra
  reanimatingRattler
  savannahHighmane
  agamaggan
  mamaBear
  ghastcoiler
  goldrinn

  ballOfMinions

  tabbycat
  turtle
  rat
  hyena

  brann
}

enum minionTypes {
  beast
  all
  noType
}

enum minionAbilities {
  summon
  targetBaff
  randomBaff
  uniqueBehavior
}

enum recruitPhases {
  afterBuyMinion
  afterSellMinion
  beforePlayMinion
  afterPlayMinion
}

enum combatPhases {
  beforeCombat
  beforeAttack
  afterAttack
  afterKill
  afterDeath
  afterCombat
}

model PlayGamePlayer {
  playerIdInGame      String    @id @map("_id")
  goldAmount          Int
  minionsRollPrice    Int
  minionSellPrice     Int
  minionPurchasePrice Int
  playerLogin         String
  playerKey           String
  selectedHeroId      heroIds?
  heroIds             heroIds[]
  countOfHitPoints    Int
  countOfArmor        Int
  isWonLastTime       Boolean?
  opponentId          String?
  opponentKey         String?
  tavernTier          Int
  tavernCardIds       String[]
  deskCardIds         String[]
  handCardIds         String[]
  PlayGame            PlayGame? @relation(fields: [playGameGameId], references: [gameId], onDelete: Cascade, onUpdate: Cascade)
  playGameGameId      String?
}

model Card {
  cardId         String        @id @map("_id")
  minionId       minionIds
  minionTypes    minionTypes[]
  tavernTier     Int
  PlayGame       PlayGame?     @relation(fields: [playGameGameId], references: [gameId], onDelete: Cascade, onUpdate: Cascade)
  playGameGameId String?
  isInUse        Boolean?
}

model PlayGame {
  gameId            String           @id @map("_id")
  phase             playGamePhases
  phaseDurationInMs Int
  phaseStartDate    String
  round             Int
  minionTypes       minionTypes[]
  availableCards    Card[]
  players           PlayGamePlayer[]
}
