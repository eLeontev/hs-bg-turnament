generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model PendingGamePlayer {
  playerId          String       @id @map("_id")
  playerKey         String
  playerIdInGame    String
  playerLogin       String
  PendingGame       PendingGame? @relation(fields: [pendingGameGameId], references: [gameId], onDelete: Cascade, onUpdate: Cascade)
  pendingGameGameId String?
}

model PendingGame {
  gameId      String              @id @map("_id")
  gameName    String
  authorId    String
  authorLogin String
  createdDate String
  players     PendingGamePlayer[]
}

enum playGamePhases {
  heroSelection
  recruit
  combat
}

enum heroIds {
  afkay
  alkair
  alexstrasza
  ambassadorFaelin
  arannaStarseeker
  archVillainRafaam
  brukan
  cthun
  captain
}

enum minionIds {
  alleycat
  scavengingHyena
  leapfrogger
  rabidSaurolisk
  sewerRat
  monstrousMacaw
  ratPack
  caveHydra
  reanimatingRattler
  savannahHighmane
  agamaggan
  mamaBear
  ghastcoiler
  goldrinn

  ballOfMinions
}

enum minionTypes {
  beast
  all
  noType
}

model PlayGamePlayer {
  playerIdInGame   String      @id @map("_id")
  playerLogin      String
  playerKey        String
  selectedHeroId   heroIds?
  heroIds          heroIds[]
  countOfHitPoints Int
  countOfArmor     Int
  isWonLastTime    Boolean?
  opponentId       String?
  opponentKey      String?
  tavernTier       Int
  deskMinionIds    minionIds[]
  handMinionIds    minionIds[]
  PlayGame         PlayGame?   @relation(fields: [playGameGameId], references: [gameId], onDelete: Cascade, onUpdate: Cascade)
  playGameGameId   String?
}

model PlayGame {
  gameId            String           @id @map("_id")
  phase             playGamePhases
  phaseDurationInMs Int
  phaseStartDate    String
  round             Int
  minionTypes       minionTypes[]
  players           PlayGamePlayer[]
}
